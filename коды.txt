client.py

import socket
import threading

HOST = '127.0.0.1'    # The server's hostname or IP address
PORT = 12345          # The port used by the server

def receive_messages(sock):
    """Receives messages from the server and prints them."""
    try:
        while True:
            data = sock.recv(1024)
            if not data:
                break
            print(data.decode('utf-8'))
    except Exception as e:
        print(f"Error receiving messages: {e}")
    finally:
        sock.close()

def main():
    """Connects to the server and sends messages."""
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        client_socket.connect((HOST, PORT))

        # Start a thread to receive messages
        receive_thread = threading.Thread(target=receive_messages, args=(client_socket,))
        receive_thread.daemon = True #Allow program to exit if only daemon threads are left
        receive_thread.start()

        while True:
            message = input()
            if message.lower() == 'exit':
                break
            client_socket.sendall(message.encode('utf-8'))
    except Exception as e:
        print(f"Error connecting to server: {e}")
    finally:
        client_socket.close()

if __name__ == "__main__":
    main()


server.py

import socket
import threading

HOST = '127.0.0.1'
PORT = 12345

clients = []
client_names = {} #dictionary to store client names and connections

def handle_client(conn, addr):
    print(f"Connected by {addr}")

    try:
        # Get username
        conn.send("USERNAME: ".encode('utf-8'))
        username = conn.recv(1024).decode('utf-8').strip()

        if not username:
            raise Exception("No username provided")

        client_names[conn] = username
        clients.append(conn)

        broadcast_message(f"{username} joined the chat!".encode('utf-8'))

        while True:
            data = conn.recv(1024)
            if not data:
                break

            message = data.decode('utf-8')
            print(f"Received from {addr} ({username}): {message}")

            broadcast_message(f"{username}: {message}".encode('utf-8'), conn) #Added username to message

    except Exception as e:
        print(f"Error with client {addr}: {e}")
    finally:
        print(f"Disconnected from {addr}")
        if conn in client_names:
             broadcast_message(f"{client_names[conn]} left the chat!".encode('utf-8'))
             del client_names[conn]

        clients.remove(conn)
        conn.close()

def broadcast_message(message, sender_conn=None):
    """Broadcasts a message to all clients except the sender."""
    for client in clients:
        if client != sender_conn:
            try:
                client.sendall(message)
            except socket.error:
                clients.remove(client)
                if client in client_names:
                    del client_names[client]


def main():
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((HOST, PORT))
    server_socket.listen()

    print(f"Listening on {HOST}:{PORT}")

    try:
        while True:
            conn, addr = server_socket.accept()
            client_thread = threading.Thread(target=handle_client, args=(conn, addr))
            client_thread.start()
    except KeyboardInterrupt:
        print("Shutting down server...")
    finally:
        server_socket.close()

if __name__ == "__main__":
    main()
